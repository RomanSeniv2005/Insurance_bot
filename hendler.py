from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
import aiohttp
from PIL import Image
from mindee_local.passport import process_passport
from mindee_local.car_docs import process_car_doc
import os
import traceback
from pdf_creation.pdf_creation import generate_insurance_pdf
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import re
from openai_local.openai_interaction import ask_openai


router = Router()

class waiting_for_data(StatesGroup):
    waiting_for_passport = State()
    waiting_for_car_doc_front = State()
    waiting_for_car_doc_back = State()
    waiting_for_data_confirmation = State()
    waiting_for_price_confirmation = State()
    fixing_data_choice = State()
    manual_data_entry = State()

confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –¢–∞–∫"), KeyboardButton(text="‚ùå –ù—ñ")]],
    resize_keyboard=True
)


main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöó –û—Ñ–æ—Ä–º–∏—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É")],
        [KeyboardButton(text="üîÑ –†–æ–∑–ø–æ—á–∞—Ç–∏ –≤—Å–µ –∑–Ω–æ–≤—É"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")],
    ],
    resize_keyboard=True
)

input_method_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É")],
    ],
    resize_keyboard=True
)

# Handler for the /start command. Greets the user, explains bot features, and shows the main menu.
@router.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –í—ñ—Ç–∞—é –≤–∞—Å —É –±–æ—Ç—ñ *UKRSTRAKHGARANT*!\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –æ–Ω–ª–∞–π–Ω üöóüíº\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–ø–∞—Å–ø–æ—Ä—Ç, —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –¥–∞–Ω—ñ\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF-–ø–æ–ª—ñ—Å\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è\n\n"
        "–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É *¬´–û—Ñ–æ—Ä–º–∏—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É¬ª* \n\n"
        "‚ÑπÔ∏è –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—î —è–∫–µ—Å—å –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç–∏ –π–æ–≥–æ –ø—Ä—è–º–æ –≤ —á–∞—Ç.\n\n"
        "–ë–∞–∂–∞—é –≤–∞–º –±–µ–∑–ø–µ—á–Ω–∏—Ö –¥–æ—Ä—ñ–≥ —Ç–∞ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üåü",
        parse_mode="Markdown",
        reply_markup=main_menu_kb
    )

@router.message(F.text == "üöó –û—Ñ–æ—Ä–º–∏—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É")
async def start_insurance(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ üì∑", reply_markup=main_menu_kb)
    await state.set_state(waiting_for_data.waiting_for_passport)

# Handler for restarting the process from the beginning when user clicks 'Restart'.
@router.message(F.text == "üîÑ –†–æ–∑–ø–æ—á–∞—Ç–∏ –≤—Å–µ –∑–Ω–æ–≤—É")
async def restart_all(message: Message, state: FSMContext):
    # Clears all state and prompts the user to start the insurance process from the beginning.
    await state.clear()
    await message.answer(
        "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É. –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ üì∑",
        reply_markup=main_menu_kb  
    )
    await state.set_state(waiting_for_data.waiting_for_passport)

# Handler for canceling the current operation.
@router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel(message: Message, state: FSMContext):
    # Cancels the current operation, clears state, and returns the user to the main menu.
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.", reply_markup=main_menu_kb)

# Handler for receiving the passport photo from the user.
@router.message(waiting_for_data.waiting_for_passport, F.photo)
async def handle_passport(message: Message, state: FSMContext):
    # Saves the passport photo and prompts for the front side of the car document.
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(passport_photo_id=file_id)
    await message.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –ü–ï–†–ï–î–ù–¨–û–á —Å—Ç–æ—Ä–æ–Ω–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ üì∑",reply_markup=main_menu_kb)
    await state.set_state(waiting_for_data.waiting_for_car_doc_front)

# Handler for receiving the front side of the car document.
@router.message(waiting_for_data.waiting_for_car_doc_front, F.photo)
async def handle_car_doc_front(message: Message, state: FSMContext):
    # Saves the front side of the car document and prompts for the back side.
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(car_doc_front_photo_id=file_id)
    await message.answer("‚úÖ –ü–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –ó–ê–î–ù–¨–û–á —Å—Ç–æ—Ä–æ–Ω–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ üì∑", reply_markup=main_menu_kb)
    await state.set_state(waiting_for_data.waiting_for_car_doc_back)

# Handler for receiving the back side of the car document, launching Mindee integration and showing extracted data.
@router.message(waiting_for_data.waiting_for_car_doc_back, F.photo)
async def handle_car_doc_back(message: Message, state: FSMContext):
    # Downloads all photos, creates a PDF, processes with Mindee, saves results, and asks the user to confirm extracted data.
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(car_doc_back_photo_id=file_id)

    data = await state.get_data()
    bot = message.bot

    passport_path = "passport.jpg"
    front_path = "front.jpg"
    back_path = "back.jpg"
    pdf_path = "car_doc_combined.pdf"

    async def download(file_id, path):
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                with open(path, "wb") as f:
                    f.write(await resp.read())

    try:
        # download files
        await download(data["passport_photo_id"], passport_path)
        await download(data["car_doc_front_photo_id"], front_path)
        await download(data["car_doc_back_photo_id"], back_path)

        # create pdf for photos
        front = Image.open(front_path).convert("RGB")
        back = Image.open(back_path).convert("RGB")
        front.save(pdf_path, save_all=True, append_images=[back])

        # üß† Integrate mindee
        passport_result = process_passport(passport_path)
        car_doc_result = process_car_doc(pdf_path)

        await message.answer("–î—è–∫—É—é –∑–∞ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞ –∑–∞—á–µ–∫–∞–π—Ç–µ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ –¥–∞–Ω—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è...")

        # save result in state 
        await state.update_data(passport_result=passport_result, car_doc_result=car_doc_result)

        # send to users for check
        await message.answer(
            f"üìÑ *–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ:*\n`{passport_result['surname']} {passport_result['given_names']}`\n\n"
            f"üöó *VIN-–∫–æ–¥ –∞–≤—Ç–æ:*\n`{car_doc_result['vin_code']}`\n\n"
            f"üöó *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä:*\n`{car_doc_result['registration_number']}`\n\n"
            f"üöó *–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∫–æ–ª—ñ—Ä:*\n`{car_doc_result['car_brand']} {car_doc_result['car_model']} {car_doc_result['color']}`\n\n"
            f"üöó *–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:*\n`{int(float(car_doc_result['year_of_manufacture']))}`\n\n"
            "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=confirm_kb,
            parse_mode="Markdown"
        )

        await state.set_state(waiting_for_data.waiting_for_data_confirmation)

    except Exception as e:
        print(f"Mindee error: {e}")
        traceback.print_exc()
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.", reply_markup=main_menu_kb)

    finally:
        for path in [passport_path, front_path, back_path, pdf_path]:
            try:
                if os.path.exists(path):
                    os.remove(path)
            except Exception:
                pass


# Handler for confirming the extracted data and moving to price confirmation.
@router.message(waiting_for_data.waiting_for_data_confirmation, F.text.lower() == "‚úÖ —Ç–∞–∫")
async def confirmed(message: Message, state: FSMContext):
    # User confirms the extracted data; proceed to price confirmation step.
    await message.answer(
        "‚úÖ –î–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.\n\n"
        "üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è ‚Äî *100 USD*.\n"
        "–í–∏ –∑–≥–æ–¥–Ω—ñ –∑ —Ü—ñ–Ω–æ—é?",
        reply_markup=confirm_kb,
        parse_mode="Markdown"
    )
    await state.set_state(waiting_for_data.waiting_for_price_confirmation)
    
# Handler for when the user rejects the extracted data and chooses how to correct it.
@router.message(waiting_for_data.waiting_for_data_confirmation, F.text.lower() == "‚ùå –Ω—ñ")
async def rejected(message: Message, state: FSMContext):
    # User rejects the extracted data; offer to re-upload photos or enter data manually.
    await message.answer(
        "–Ø–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ?",
        reply_markup=input_method_kb
    )
    await state.set_state(waiting_for_data.fixing_data_choice)

# Handler for when the user chooses to re-upload photos to correct data.
@router.message(waiting_for_data.fixing_data_choice, F.text == "üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ")
async def fix_by_photos(message: Message, state: FSMContext):
    # User chooses to re-upload photos; restart from passport photo step.
    await message.answer("–û–∫–µ–π, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —â–µ —Ä–∞–∑.", reply_markup=main_menu_kb)
    await state.set_state(waiting_for_data.waiting_for_passport)

router.message(waiting_for_data.waiting_for_passport)

@router.message(waiting_for_data.fixing_data_choice, F.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É")
async def manual_input(message: Message, state: FSMContext):
    template = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
        "–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è: –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω\n"
        "VIN: WVWZZZ1JZXW000000\n"
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä: –ê–ê1234–í–°\n"
        "–ú–∞—Ä–∫–∞: Volkswagen\n"
        "–ú–æ–¥–µ–ª—å: Passat\n"
        "–ö–æ–ª—ñ—Ä: –ß–æ—Ä–Ω–∏–π\n"
        "–†—ñ–∫ –≤–∏–ø—É—Å–∫—É: 2016"
    )
    await message.answer(template, reply_markup=ReplyKeyboardRemove())
    await state.set_state(waiting_for_data.manual_data_entry)


@router.message(waiting_for_data.manual_data_entry)
async def parse_manual_data(message: Message, state: FSMContext):
    text = message.text

    try:
        surname_and_name = re.search(r"–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è:\s*(.+)", text).group(1)
        vin = re.search(r"VIN:\s*(.+)", text).group(1)
        reg_num = re.search(r"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä:\s*(.+)", text).group(1)
        brand = re.search(r"–ú–∞—Ä–∫–∞:\s*(.+)", text).group(1)
        model = re.search(r"–ú–æ–¥–µ–ª—å:\s*(.+)", text).group(1)
        color = re.search(r"–ö–æ–ª—ñ—Ä:\s*(.+)", text).group(1)
        year = int(re.search(r"–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:\s*(\d{4})", text).group(1))

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø—Ä—ñ–∑–≤–∏—â–µ —ñ —ñ–º‚Äô—è
        split_name = surname_and_name.strip().split(" ", 1)
        surname = split_name[0]
        given_names = split_name[1] if len(split_name) > 1 else ""

        await state.update_data(
            passport_result={
                "surname": surname,
                "given_names": given_names,
            },
            car_doc_result={
                "vin_code": vin,
                "registration_number": reg_num,
                "car_brand": brand,
                "car_model": model,
                "color": color,
                "year_of_manufacture": year,
            }
        )

        confirm_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –¢–∞–∫"), KeyboardButton(text="‚ùå –ù—ñ")]],
            resize_keyboard=True
        )

        await message.answer(
            f"üìÑ *–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ:*\n`{surname} {given_names}`\n\n"
            f"üöó *VIN-–∫–æ–¥ –∞–≤—Ç–æ:*\n`{vin}`\n\n"
            f"üöó *–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä:*\n`{reg_num}`\n\n"
            f"üöó *–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∫–æ–ª—ñ—Ä:*\n`{brand} {model} {color}`\n\n"
            f"üöó *–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:*\n`{year}`\n\n"
            "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=confirm_kb,
            parse_mode="Markdown"
        )

        await state.set_state(waiting_for_data.waiting_for_price_confirmation)

    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É. "
            "–ö–æ–∂–Ω–µ –ø–æ–ª–µ –º–∞—î –±—É—Ç–∏ –Ω–∞ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É –∑–≥—ñ–¥–Ω–æ –∑ —à–∞–±–ª–æ–Ω–æ–º.", reply_markup=input_method_kb)


@router.message(waiting_for_data.waiting_for_price_confirmation, F.text.lower() == "‚úÖ —Ç–∞–∫")
async def price_accepted(message: Message, state: FSMContext):
    data = await state.get_data()
    passport_result = data.get("passport_result")
    car_doc_result = data.get("car_doc_result")

    await message.answer("üßæ –ß—É–¥–æ–≤–æ! –ó–∞—Ä–∞–∑ –Ω–∞–¥—ñ—à–ª—é –≤–∞–º pdf-—Ñ–∞–π–ª –≤–∞—à–æ—ó —Å—Ç—Ä–∞—Ö—ñ–≤–∫–∏")

    pdf_path = generate_insurance_pdf(passport_result, car_doc_result, price=100)
    input_file = FSInputFile(path=pdf_path, filename="–ü–æ–ª—ñ—Å_—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è.pdf")
    await message.answer_document(input_file, caption="–û—Å—å –≤–∞—à–∞ —Å—Ç—Ä–∞—Ö—ñ–≤–∫–∞ üìÑ")

    # Delete the file after sending
    if os.path.exists(pdf_path):
        os.remove(pdf_path)

    await state.clear()



@router.message(waiting_for_data.waiting_for_price_confirmation, F.text.lower() == "‚ùå –Ω—ñ")
async def price_rejected(message: Message, state: FSMContext):
    await message.answer(
        "üòî –í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü—ñ–Ω–∞ *100 USD* ‚Äî —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —ñ –Ω–µ –ø—ñ–¥–ª—è–≥–∞—î –∑–º—ñ–Ω—ñ.\n"
        "–Ø–∫—â–æ –∑–º—ñ–Ω–∏—Ç–µ –¥—É–º–∫—É ‚Äî —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç!",
        parse_mode="Markdown",
        reply_markup= main_menu_kb
    )
    await state.clear()

@router.message(F.text)
async def handle_text(message: Message):
    user_input = message.text

    try:
        response = await ask_openai(user_input)
        await message.answer(response,reply_markup= main_menu_kb)
    except Exception as e:
        print(f"OpenAI error: {e}")
        traceback.print_exc()
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu_kb)